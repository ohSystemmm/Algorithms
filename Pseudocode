// Class representing a Binary Search Tree
class BinarySearchTree:

    // Declare the root of the tree
    Node root

------------------------------------------------------------------------------------------------------------------------
    // Method to insert a node into the tree
    method insert(node):

        // Use the helper function to insert the node
        root = insertHelper(root, node)

------------------------------------------------------------------------------------------------------------------------
    // Recursive helper function for inserting a node
    method insertHelper(root, node):

        // Get the data from the node to be inserted
        data = node.data

        // If the current root is null, insert the node here
        if root is null:
            root = node
            return root

        // If the node's data is smaller than the current root's data
        else if data < root.data:
            // Recursively insert into the left subtree
            root.left = insertHelper(root.left, node)

        // If the node's data is larger than or equal to the current root's data
        else:
            // Recursively insert into the right subtree
            root.right = insertHelper(root.right, node)

        // Return the root after insertion
        return root

------------------------------------------------------------------------------------------------------------------------
    // Method to display the tree in order
    method display():

        // Use a helper function to display the tree from the root
        displayHelper(root)

------------------------------------------------------------------------------------------------------------------------
    // Recursive helper function to display the tree in-order
    method displayHelper(root):

        // If the current root is not null
        if root is not null:
            // Recursively display the left subtree
            displayHelper(root.left)

            // Print the data of the current root
            print(root.data)

            // Recursively display the right subtree
            displayHelper(root.right)

------------------------------------------------------------------------------------------------------------------------
    // Method to search for a value in the tree
    method search(data):

        // Use the helper function to search from the root
        return searchHelper(root, data)

------------------------------------------------------------------------------------------------------------------------
    // Recursive helper function to search for a value
    method searchHelper(root, data):

        // If the current root is null, the value is not found
        if root is null:
            return false

        // If the current root's data matches the search value
        else if root.data == data:
            return true

        // If the search value is smaller, search in the left subtree
        else if root.data > data:
            return searchHelper(root.left, data)

        // If the search value is larger, search in the right subtree
        else:
            return searchHelper(root.right, data)

------------------------------------------------------------------------------------------------------------------------
    // Method to remove a node with a given value
    method remove(data):

        // Check if the node exists before removing
        if search(data):
            removeHelper(root, data)
        else:
            print(data + " Not Found")

------------------------------------------------------------------------------------------------------------------------
    // Recursive helper function to remove a node
    method removeHelper(root, data):

        // If the root is null, return null (node not found)
        if root is null:
            return root

        // If the value to be deleted is smaller, go to the left subtree
        else if data < root.data:
            root.left = removeHelper(root.left, data)

        // If the value to be deleted is larger, go to the right subtree
        else if data > root.data:
            root.right = removeHelper(root.right, data)

        // If the current node matches the value to be deleted
        else:

            // Case 1: Node has no children (leaf node)
            if root.left is null and root.right is null:
                root = null

            // Case 2: Node has a right child
            else if root.right is not null:
                // Replace the node's data with its in-order successor
                root.data = successor(root)

                // Remove the successor from the right subtree
                root.right = removeHelper(root.right, root.data)

            // Case 3: Node has a left child
            else:
                // Replace the node's data with its in-order predecessor
                root.data = predecessor(root)

                // Remove the predecessor from the left subtree
                root.left = removeHelper(root.left, root.data)

        // Return the updated root
        return root

------------------------------------------------------------------------------------------------------------------------
    // Helper function to find the successor (smallest value in right subtree)
    method successor(root):

        // Move to the right subtree
        root = root.right

        // Find the leftmost node (smallest value)
        while root.left is not null:
            root = root.left

        // Return the data of the successor
        return root.data

------------------------------------------------------------------------------------------------------------------------
    // Helper function to find the predecessor (largest value in left subtree)
    method predecessor(root):

        // Move to the left subtree
        root = root.left

        // Find the rightmost node (largest value)
        while root.right is not null:
            root = root.right

        // Return the data of the predecessor
        return root.data
